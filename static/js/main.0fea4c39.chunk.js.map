{"version":3,"sources":["logo.png","Components/Movie.js","Components/MovieList.js","Components/MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","movie","className","to","id","src","poster_path","alt","title","MovieList","state","movies","fetch","res","json","console","log","this","setState","results","map","key","Component","MovieDetail","props","match","params","backdrop_path","release_date","overview","App","logo","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,wTCiB5BC,G,YAVD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,yBAAKC,UAAU,0BACb,kBAAC,IAAD,CAAMC,GAAE,WAAMF,EAAMG,KAClB,yBAAKF,UAAU,0BACb,yBAAKG,IAAG,UANI,kCAMJ,OAAmBJ,EAAMK,aAAeC,IAAKN,EAAMO,aC0BpDC,E,2MAhCXC,MAAQ,CACJC,OAAQ,I,gMAKYC,MAChB,kH,cADIC,E,0BAGeA,EAAIC,Q,OAAnBH,E,OACNI,QAAQC,IAAIL,GACZM,KAAKC,SAAS,CACpBP,OAAQA,EAAOQ,U,kDAGTJ,QAAQC,IAAR,M,0FAMF,OACE,yBAAKd,UAAU,yBACb,yBAAKA,UAAU,SACVe,KAAKP,MAAMC,OAAOS,KAAI,SAAAnB,GAAK,OAC5B,kBAAC,EAAD,CAAOoB,IAAKpB,EAAMG,GAAIH,MAAOA,a,GA1BrBqB,aCiDTC,G,iNA9Cbb,MAAQ,CACNT,MAAO,I,gMAKaW,MAAM,sCAAD,OACiBK,KAAKO,MAAMC,MAAMC,OAAOtB,GADzC,8D,cAAjBS,E,0BAGcA,EAAIC,Q,OAAlBb,E,OACNc,QAAQC,IAAIf,GACZgB,KAAKC,SAAS,CACZjB,MAAOA,I,kDAGTc,QAAQC,IAAR,M,0FAIM,IACDf,EAASgB,KAAKP,MAAdT,MACP,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,sBACf,yBAAKG,IAAG,UA3BM,qCA2BN,OAAqBJ,EAAM0B,eAAiBpB,IAAKN,EAAMO,SAE/D,yBAAKN,UAAU,4BACb,yBAAKA,UAAU,UACjB,yBAAKG,IAAG,UAhCI,kCAgCJ,OAAmBJ,EAAMK,aAAeC,IAAKN,EAAMO,UAI3D,yBAAKN,UAAU,wBACf,4BAAKD,EAAMO,OACX,4BAAKP,EAAM2B,cAEX,yBAAK1B,UAAU,oBACjB,2BAAID,EAAM4B,iB,GAtCUP,cCmBXQ,G,MAjBH,kBACN,kBAAC,IAAD,KACA,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAMC,GAAG,KACT,yBAAKE,IAAK0B,IAAM7B,UAAU,WAAWK,IAAI,WAG3C,kBAAC,IAAD,KACR,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,IAAIC,UAAWzB,IACjC,kBAAC,IAAD,CAAOwB,KAAK,OAAOC,UAAWX,SCNVY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0fea4c39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c9302549.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst POSTER_PATH = \"http://image.tmdb.org/t/p/w200\";\r\n\r\nconst Movie = ({ movie }) => (\r\n  <div className=\"single-movie-container\">\r\n    <Link to={`/${movie.id}`}>\r\n      <div className=\"movie-clickable-poster\">\r\n        <img src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\r\n      </div>\r\n    </Link>\r\n  </div>\r\n);\r\n\r\nexport default Movie;\r\n\r\nMovie.propTypes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired\r\n  }).isRequired\r\n};\r\n\r\n// funstional stateless component,if no state, or lifecycle methods then use this component.\r\n","import React, {Component} from 'react';\r\nimport \"./MovieList.css\";\r\nimport Movie from \"./Movie\";\r\n\r\nclass MovieList extends Component {\r\n    state = {\r\n        movies: []\r\n      }\r\n\r\n      async componentDidMount() {\r\n        try {\r\n          const res = await fetch(\r\n            \"https://api.themoviedb.org/3/movie/now_playing?api_key=625c617a9abf086d7bc551088835e18f&language=en-US&page=1\"\r\n          );\r\n          const movies = await res.json();\r\n          console.log(movies);\r\n          this.setState({\r\n    movies: movies.results\r\n          })\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n\r\n    render() {\r\n\r\n        return(\r\n          <div className=\"movie-batch-container\">\r\n            <div className=\"movie\">\r\n                {this.state.movies.map(movie => \r\n                <Movie key={movie.id} movie={movie} />)}\r\n              \r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MovieList;\r\n","import React, { Component } from \"react\";\r\nimport \"./MovieDetail.css\";\r\n\r\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w200';\r\nconst BACKDROP_PATH = 'https://image.tmdb.org/t/p/w1280/';\r\n\r\nclass MovieDetail extends Component {\r\n  state = {\r\n    movie: {}\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const res = await fetch(\r\n        `https://api.themoviedb.org/3/movie/${this.props.match.params.id}?api_key=625c617a9abf086d7bc551088835e18f&language=en-US`\r\n      );\r\n      const movie = await res.json();\r\n      console.log(movie);\r\n      this.setState({\r\n        movie: movie\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {movie} = this.state;\r\n    return (\r\n      <div className=\"movie-container\">\r\n        <div className=\"backdrop-container\">\r\n        <img src={`${BACKDROP_PATH}${movie.backdrop_path}`} alt={movie.title} />\r\n        </div>\r\n        <div className=\"posterBackdrop-container\">\r\n          <div className=\"poster\">\r\n        <img src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\r\n        </div>\r\n        </div>\r\n        \r\n        <div className=\"title-date-container\">\r\n        <h1>{movie.title}</h1>\r\n        <h3>{movie.release_date}</h3>\r\n       \r\n        <div className=\"p-info-container\">\r\n      <p>{movie.overview}</p>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    \r\n      \r\n    );\r\n  }\r\n}\r\nexport default MovieDetail;\r\n","import React from \"react\";\nimport logo from \"./logo.png\";\nimport {BrowserRouter as Router,Route, Switch, Link } from 'react-router-dom';\nimport MovieList from \"./Components/MovieList\";\nimport MovieDetail from \"./Components/MovieDetail\";\nimport \"./App.css\";\n\n\nconst App = () => (\n      <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Link to='/'>\n          <img src={logo} className=\"app-logo\" alt=\"logo\" />\n          </Link>\n        </header>\n        <Switch>\n<Route exact path=\"/\" component={MovieList} />\n<Route path=\"/:id\" component={MovieDetail} />\n</Switch>\n      </div>\n      </Router>\n    );\n \n\nexport default App;\n\n\n\n// normal component","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}